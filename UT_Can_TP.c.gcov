        -:    0:Source:UT_Can_TP.c
        -:    0:Graph:UT_CAN_TP.gcno
        -:    0:Data:UT_CAN_TP.gcda
        -:    0:Runs:15
        -:    1:/** ==================================================================================================================*\
        -:    2:  @file UT_Can_TP.c
        -:    3:
        -:    4:  @brief Testy jednostkowe do CanTp
        -:    5:\*====================================================================================================================*/
        -:    6:
        -:    7:#include "acutest.h"
        -:    8:#include "Std_Types.h"
        -:    9:
        -:   10:#include "CanTp.c"   
        -:   11:
        -:   12:#include <stdio.h>
        -:   13:#include <string.h>
        -:   14:
        -:   15:#include "fff.h"
        -:   16:
        -:   17:DEFINE_FFF_GLOBALS; 
        -:   18:
       5*:   19:FAKE_VALUE_FUNC(BufReq_ReturnType, PduR_CanTpCopyTxData, PduIdType, const PduInfoType*, const RetryInfoType*, PduLengthType*);
------------------
PduR_CanTpCopyTxData_reset:
        2:   19:FAKE_VALUE_FUNC(BufReq_ReturnType, PduR_CanTpCopyTxData, PduIdType, const PduInfoType*, const RetryInfoType*, PduLengthType*);
------------------
PduR_CanTpCopyTxData:
       3*:   19:FAKE_VALUE_FUNC(BufReq_ReturnType, PduR_CanTpCopyTxData, PduIdType, const PduInfoType*, const RetryInfoType*, PduLengthType*);
------------------
       6*:   20:FAKE_VOID_FUNC(PduR_CanTpTxConfirmation, PduIdType, Std_ReturnType);
------------------
PduR_CanTpTxConfirmation_reset:
        2:   20:FAKE_VOID_FUNC(PduR_CanTpTxConfirmation, PduIdType, Std_ReturnType);
------------------
PduR_CanTpTxConfirmation:
       4*:   20:FAKE_VOID_FUNC(PduR_CanTpTxConfirmation, PduIdType, Std_ReturnType);
------------------
       2*:   21:FAKE_VOID_FUNC(PduR_CanTpRxIndication, PduIdType, Std_ReturnType);
------------------
PduR_CanTpRxIndication_reset:
        1:   21:FAKE_VOID_FUNC(PduR_CanTpRxIndication, PduIdType, Std_ReturnType);
------------------
PduR_CanTpRxIndication:
       1*:   21:FAKE_VOID_FUNC(PduR_CanTpRxIndication, PduIdType, Std_ReturnType);
------------------
       4*:   22:FAKE_VALUE_FUNC(BufReq_ReturnType, PduR_CanTpCopyRxData, PduIdType, const PduInfoType*, PduLengthType*);
------------------
PduR_CanTpCopyRxData_reset:
    #####:   22:FAKE_VALUE_FUNC(BufReq_ReturnType, PduR_CanTpCopyRxData, PduIdType, const PduInfoType*, PduLengthType*);
------------------
PduR_CanTpCopyRxData:
       4*:   22:FAKE_VALUE_FUNC(BufReq_ReturnType, PduR_CanTpCopyRxData, PduIdType, const PduInfoType*, PduLengthType*);
------------------
    #####:   23:FAKE_VALUE_FUNC(BufReq_ReturnType, PduR_CanTpStartOfReception, PduIdType, const PduInfoType*, PduLengthType, PduLengthType*);
------------------
PduR_CanTpStartOfReception_reset:
    #####:   23:FAKE_VALUE_FUNC(BufReq_ReturnType, PduR_CanTpStartOfReception, PduIdType, const PduInfoType*, PduLengthType, PduLengthType*);
------------------
PduR_CanTpStartOfReception:
    #####:   23:FAKE_VALUE_FUNC(BufReq_ReturnType, PduR_CanTpStartOfReception, PduIdType, const PduInfoType*, PduLengthType, PduLengthType*);
------------------
        -:   24:
       5*:   25:FAKE_VALUE_FUNC(Std_ReturnType, CanIf_Transmit, PduIdType, const PduInfoType*);
------------------
CanIf_Transmit_reset:
        3:   25:FAKE_VALUE_FUNC(Std_ReturnType, CanIf_Transmit, PduIdType, const PduInfoType*);
------------------
CanIf_Transmit:
       2*:   25:FAKE_VALUE_FUNC(Std_ReturnType, CanIf_Transmit, PduIdType, const PduInfoType*);
------------------
        -:   26:
        -:   27:uint8 PduR_CanTpCopyTxData_sdu_data[20][7];
        -:   28:PduLengthType *PduR_CanTpCopyTxData_availableDataPtr; 
        -:   29:PduLengthType* PduR_CanTpCopyRxData_buffSize_array;
        -:   30:PduLengthType *PduR_CanTpStartOfReception_buffSize_array;
        -:   31:
        3:   32:BufReq_ReturnType PduR_CanTpCopyTxData_FF(PduIdType id, const PduInfoType* info, const RetryInfoType* retry, PduLengthType* availableDataPtr){
        -:   33:    static int i = 0;
        -:   34:    int iCtr;
        3:   35:    i = PduR_CanTpCopyTxData_fake.call_count - 1;
       22:   36:    for(iCtr = 0; iCtr < info->SduLength; iCtr++ ){
       19:   37:      info->SduDataPtr[iCtr] = PduR_CanTpCopyTxData_sdu_data[i][iCtr];
        -:   38:    }
        3:   39:    *availableDataPtr = PduR_CanTpCopyTxData_availableDataPtr[i];
        3:   40:    return PduR_CanTpCopyTxData_fake.return_val_seq[i];
        -:   41:}
        -:   42:
    #####:   43:BufReq_ReturnType PduR_CanTpStartOfReception_FF(PduIdType id, const PduInfoType* info, PduLengthType TpSduLength, PduLengthType* bufferSizePtr){
        -:   44:    static int i = 0;
    #####:   45:    i = PduR_CanTpStartOfReception_fake.call_count - 1;
    #####:   46:    *bufferSizePtr = PduR_CanTpStartOfReception_buffSize_array[i];
    #####:   47:   return PduR_CanTpStartOfReception_fake.return_val_seq[i];
        -:   48:}
        -:   49:
        4:   50:BufReq_ReturnType PduR_CanTpCopyRxData_FF(PduIdType id, const PduInfoType* info, PduLengthType* bufferSizePtr){
        -:   51:    static int i = 0;
        4:   52:    i = PduR_CanTpCopyRxData_fake.call_count - 1;
        4:   53:    *bufferSizePtr = PduR_CanTpCopyRxData_buffSize_array[i];
        4:   54:    return PduR_CanTpCopyRxData_fake.return_val_seq[i];
        -:   55:}
        -:   56:
        -:   57:
        -:   58:/** ==================================================================================================================*\
        -:   59:                                TESTY JEDNOSTKOWE
        -:   60:\*====================================================================================================================*/
        -:   61:
        -:   62:/**
        -:   63:  @brief Test inicjalizacji
        -:   64:
        -:   65:  Funkcja testująca inicjalizacji CanTp.
        -:   66:*/
        -:   67:
        1:   68:void Test_Of_CanTp_Init(void){
        1:   69:    CanTp_VariablesRX.eCanTp_StateRX == CANTP_RX_PROCESSING_SUSPEND;
        1:   70:    CanTp_VariablesRX.uiBlocksNxtCts = 2;
        1:   71:    CanTp_VariablesRX.CanTp_Current_RxId = 1;
        1:   72:    CanTp_VariablesRX.uiExpected_CF_SN = 2;
        1:   73:    CanTp_VariablesRX.uiTransmittedBytes = 4;
        -:   74:
        1:   75:    CanTp_VariablesTX.eCanTp_StateTX = CANTP_TX_PROCESSING;
        1:   76:    CanTp_VariablesTX.uiFrameNrFC = 1;
        1:   77:    CanTp_VariablesTX.CanTp_Current_TxId = 1;
        1:   78:    CanTp_VariablesTX.uiMsgLen = 87;
        1:   79:    CanTp_VariablesTX.uiTransmittedBytes = 44;
        1:   80:    CanTp_VariablesTX.uiNxtSN = 1;
        1:   81:    CanTp_VariablesTX.CanTp_Current_TxId = 2;
        -:   82:
        1:   83:    CanTp_State = CANTP_OFF;
        -:   84:
        1:   85:    CanTp_Init();
        -:   86:    
        1:   87:    TEST_CHECK(CanTp_VariablesTX.eCanTp_StateTX == CANTP_TX_WAIT);
        1:   88:    TEST_CHECK(CanTp_VariablesTX.CanTp_Current_TxId == 0); 
        1:   89:    TEST_CHECK(CanTp_VariablesTX.uiFrameNrFC == 0);
        1:   90:    TEST_CHECK(CanTp_VariablesTX.uiMsgLen == 0);
        1:   91:    TEST_CHECK(CanTp_VariablesTX.uiTransmittedBytes == 0);
        -:   92:
        1:   93:    TEST_CHECK(CanTp_VariablesRX.eCanTp_StateRX == CANTP_RX_WAIT);
        1:   94:    TEST_CHECK(CanTp_VariablesRX.uiBlocksNxtCts == 0);
        1:   95:    TEST_CHECK(CanTp_VariablesRX.CanTp_Current_RxId == 0);
        1:   96:    TEST_CHECK(CanTp_VariablesRX.uiExpected_CF_SN == 0);
        1:   97:    TEST_CHECK(CanTp_VariablesRX.uiTransmittedBytes == 0);
        -:   98:
        1:   99:    TEST_CHECK(CanTp_State == CANTP_ON);
        1:  100:}
        -:  101:
        -:  102:/**
        -:  103:  @brief Test wersji
        -:  104:
        -:  105:  Funkcja testująca zapisywana wersję CanTp.
        -:  106:*/
        1:  107:void Test_Of_CanTp_GetVersionInfo(void)
        -:  108:{
        -:  109:	Std_VersionInfoType versioninfo;
        1:  110:	CanTp_GetVersionInfo(&versioninfo);
        1:  111:	TEST_CHECK(versioninfo.sw_major_version == 0x00u);
        1:  112:	TEST_CHECK(versioninfo.sw_minor_version == 0x01u);
        1:  113:	TEST_CHECK(versioninfo.sw_patch_version == 0x00u);
        1:  114:	TEST_CHECK(versioninfo.vendorID == 0x00u);
        1:  115:  TEST_CHECK(versioninfo.moduleID == 0x0Eu);
        -:  116:
        1:  117:	TEST_CHECK(versioninfo.sw_major_version != 0x01u);
        1:  118:	TEST_CHECK(versioninfo.sw_minor_version != 0x00u);
        1:  119:	TEST_CHECK(versioninfo.sw_patch_version != 0x01u);
        1:  120:	TEST_CHECK(versioninfo.vendorID != 0x01u);
        1:  121:  TEST_CHECK(versioninfo.moduleID != 0x00u);
        1:  122:}
        -:  123:
        -:  124:/**
        -:  125:  @brief Test Wyłączenia modułu
        -:  126:
        -:  127:  Funkcja testująca wyłączania modułu CanTp.
        -:  128:*/
        1:  129:void Test_Of_CanTp_Shutdown(void){
        1:  130:    CanTp_VariablesTX.eCanTp_StateTX = CANTP_TX_PROCESSING;
        1:  131:    CanTp_VariablesTX.uiFrameNrFC = 2;
        1:  132:    CanTp_VariablesTX.CanTp_Current_TxId = 1;
        1:  133:    CanTp_VariablesTX.uiMsgLen = 87;
        1:  134:    CanTp_VariablesTX.uiTransmittedBytes = 42;
        1:  135:    CanTp_VariablesTX.uiNxtSN = 2;
        1:  136:    CanTp_VariablesTX.CanTp_Current_TxId = 1;
        -:  137:
        1:  138:    CanTp_VariablesRX.eCanTp_StateRX == CANTP_RX_WAIT;
        1:  139:    CanTp_VariablesRX.uiBlocksNxtCts = 2;
        1:  140:    CanTp_VariablesRX.CanTp_Current_RxId = 1;
        1:  141:    CanTp_VariablesRX.uiExpected_CF_SN = 1;
        1:  142:    CanTp_VariablesRX.uiTransmittedBytes = 2;
        -:  143:
        1:  144:    CanTp_State = CANTP_ON;
        -:  145:
        1:  146:    CanTp_Shutdown();
        -:  147:    
        1:  148:    TEST_CHECK(CanTp_VariablesTX.eCanTp_StateTX == CANTP_TX_WAIT);
        1:  149:    TEST_CHECK(CanTp_VariablesTX.CanTp_Current_TxId == 0); 
        1:  150:    TEST_CHECK(CanTp_VariablesTX.uiFrameNrFC == 0);
        1:  151:    TEST_CHECK(CanTp_VariablesTX.uiMsgLen == 0);
        1:  152:    TEST_CHECK(CanTp_VariablesTX.uiTransmittedBytes == 0);
        -:  153:
        1:  154:    TEST_CHECK(CanTp_VariablesRX.eCanTp_StateRX == CANTP_RX_WAIT);
        1:  155:    TEST_CHECK(CanTp_VariablesRX.uiBlocksNxtCts == 0);
        1:  156:    TEST_CHECK(CanTp_VariablesRX.CanTp_Current_RxId == 0);
        1:  157:    TEST_CHECK(CanTp_VariablesRX.uiExpected_CF_SN == 0);
        1:  158:    TEST_CHECK(CanTp_VariablesRX.uiTransmittedBytes == 0);
        -:  159:
        1:  160:    TEST_CHECK(CanTp_State == CANTP_OFF);
        1:  161:    TEST_CHECK(CanTp_State != CANTP_ON);
        1:  162:}
        -:  163:
        -:  164:/**
        -:  165:  @brief Test żądania transmisji
        -:  166:
        -:  167:  Funkcja testująca żądanie transmisji PDU.
        -:  168:*/
        1:  169:void TestOf_CanTp_Transmit(void){
        -:  170:
        1:  171:  PduIdType PduId = 0x01;
        -:  172:  PduInfoType PduInfo;
        -:  173:  uint8 puiSduData[8];
        -:  174:  uint8 *puiMetaData;
        1:  175:  PduInfo.MetaDataPtr = puiMetaData;
        1:  176:  PduInfo.SduDataPtr = puiSduData;
        -:  177:  Std_ReturnType ret; 
        -:  178: 
        1:  179:  PduLengthType availableDataPtr_arr[10] = {1,2,3,4,5,6,7,8,9,0};
        1:  180:  uint8 puiSduDataArr[3][5] = { "dupa ", "dupa ", "test2"};
        -:  181:
        -:  182:
        -:  183:  PduLengthType availableData;
        -:  184:  int i;
        -:  185:
        4:  186:  for( i = 0; i < 3; i++){
        3:  187:      memcpy(PduR_CanTpCopyTxData_sdu_data[i], puiSduDataArr[i], sizeof(uint8)*7);
        -:  188:  }
        -:  189:
        1:  190:  PduR_CanTpCopyTxData_availableDataPtr = availableDataPtr_arr;
        -:  191:
        1:  192:  RESET_FAKE(PduR_CanTpCopyTxData);
        1:  193:  RESET_FAKE(CanIf_Transmit);
        1:  194:  RESET_FAKE(PduR_CanTpTxConfirmation);
        -:  195:
        1:  196:  PduR_CanTpCopyTxData_fake.custom_fake = PduR_CanTpCopyTxData_FF;
        -:  197:
        1:  198:  Std_ReturnType CanIf_Transmit_retv[] = {E_OK, E_OK, E_NOT_OK, E_OK};
        1:  199:  SET_RETURN_SEQ(CanIf_Transmit, CanIf_Transmit_retv, 4);
        -:  200:
        1:  201:  BufReq_ReturnType PduR_CanTpCopyTxData_retv[] = {BUFREQ_OK, BUFREQ_E_NOT_OK, BUFREQ_BUSY, BUFREQ_OK};
        1:  202:  SET_RETURN_SEQ(PduR_CanTpCopyTxData, PduR_CanTpCopyTxData_retv, 4);
        -:  203:
        -:  204:  
        -:  205:  /*                  TEST 1
        -:  206:       CanTp_State = CANTP_OFF ---> Nic nie rób
        -:  207:  */ 
        1:  208:  CanTp_State = CANTP_OFF;
        1:  209:  CanTp_VariablesTX.eCanTp_StateTX = CANTP_TX_WAIT;
        1:  210:  CanTp_VariablesTX.CanTp_Current_TxId = 2;
        1:  211:  PduInfo.SduLength = 7;
        -:  212:  
        1:  213:  ret = CanTp_Transmit(PduId, &PduInfo);
        -:  214:  
        1:  215:  TEST_CHECK( ret == E_NOT_OK );
        1:  216:  TEST_CHECK(CanTp_VariablesTX.eCanTp_StateTX == CANTP_TX_WAIT);
        1:  217:  TEST_CHECK(CanTp_VariablesTX.CanTp_Current_TxId == 2);
        -:  218: 
        -:  219: /*
        -:  220:                                    TEST 2 
        -:  221:  CANTP_TX_WAIT - SduLenght < 8 - wysyłane Single Frame - zwracane E_OK oraz BUFREQ_OK
        -:  222:*/
        1:  223:  CanTp_State = CANTP_ON;
        1:  224:  CanTp_VariablesTX.eCanTp_StateTX = CANTP_TX_WAIT;
        1:  225:  CanTp_VariablesTX.CanTp_Current_TxId = 2;
        1:  226:  PduInfo.SduLength = 7;
        -:  227:
        1:  228:  ret = CanTp_Transmit(PduId, &PduInfo);
        -:  229:
        1:  230:  TEST_CHECK(ret == E_OK);
        -:  231:
        1:  232:  TEST_CHECK(PduR_CanTpCopyTxData_fake.call_count == 1);
        1:  233:  TEST_CHECK(PduR_CanTpCopyTxData_fake.arg0_val == PduId);
        1:  234:  TEST_CHECK(PduR_CanTpCopyTxData_fake.arg1_val->SduLength == 7);
        1:  235:  TEST_CHECK(PduR_CanTpCopyTxData_fake.arg2_val == NULL);
        -:  236: 
        1:  237:  TEST_CHECK(CanIf_Transmit_fake.call_count == 1 );
        1:  238:  TEST_CHECK(CanIf_Transmit_fake.arg0_val == 1 );
        1:  239:  TEST_CHECK(CanIf_Transmit_fake.arg1_val->SduDataPtr[0] == 0x7 );
        1:  240:  TEST_CHECK(CanIf_Transmit_fake.arg1_val->SduDataPtr[1] == 'd' );
        1:  241:  TEST_CHECK(CanIf_Transmit_fake.arg1_val->SduDataPtr[2] == 'u' );
        1:  242:  TEST_CHECK(CanIf_Transmit_fake.arg1_val->SduDataPtr[3] == 'p' );
        1:  243:  TEST_CHECK(CanIf_Transmit_fake.arg1_val->SduDataPtr[4] == 'a' );
        1:  244:  TEST_CHECK(CanIf_Transmit_fake.arg1_val->SduDataPtr[5] == ' ' );
        -:  245:
        1:  246:  TEST_CHECK(CanTp_VariablesTX.eCanTp_StateTX == CANTP_TX_WAIT);
        1:  247:  TEST_CHECK(CanTp_VariablesTX.CanTp_Current_TxId == 2);
        -:  248:  
        1:  249:  CanTp_ResetRX();
        -:  250:
        -:  251:/*
        -:  252:                               TEST3 
        -:  253:  CANTP_TX_WAIT - SduLenght < 8 -  zwracane E_NOT_OK oraz BUFREQ_E_NOT_OK
        -:  254:*/
        1:  255:  CanTp_VariablesTX.eCanTp_StateTX = CANTP_TX_WAIT;
        1:  256:  CanTp_VariablesTX.CanTp_Current_TxId = 2;
        1:  257:  PduInfo.SduLength = 7;
        -:  258:
        1:  259:  ret = CanTp_Transmit(PduId, &PduInfo);
        1:  260:  TEST_CHECK(ret == E_NOT_OK);
        1:  261:  TEST_CHECK(PduR_CanTpCopyTxData_fake.call_count == 2);
        1:  262:  TEST_CHECK(CanTp_VariablesTX.eCanTp_StateTX == CANTP_TX_WAIT);
        1:  263:  TEST_CHECK(CanTp_VariablesTX.CanTp_Current_TxId == 0);
        1:  264:  TEST_CHECK(PduR_CanTpTxConfirmation_fake.call_count == 1);
        1:  265:  TEST_CHECK(PduR_CanTpTxConfirmation_fake.arg1_val == E_NOT_OK);
        1:  266:}
        -:  267:
        -:  268:/**
        -:  269:  @brief Test przerwania transmisji
        -:  270:
        -:  271:  Funkcja testująca przerwanie transmisji PDU.
        -:  272:*/
        1:  273:void Test_Of_CanTp_CancelTransmit(void){
        -:  274:
        -:  275:  /*
        -:  276:                  TEST 1 
        -:  277:              Zwracane - E_OK (Zgodne ID)
        -:  278:  */
        -:  279:    Std_ReturnType ret;
        -:  280:    
        1:  281:    CanTp_VariablesTX.eCanTp_StateTX = CANTP_TX_WAIT;
        1:  282:    CanTp_VariablesTX.uiFrameNrFC = 1;
        1:  283:    CanTp_VariablesTX.CanTp_Current_TxId = 2;
        1:  284:    CanTp_VariablesTX.uiMsgLen = 87;
        1:  285:    CanTp_VariablesTX.uiTransmittedBytes = 46;
        1:  286:    CanTp_VariablesTX.uiNxtSN = 0;
        -:  287:
        1:  288:    ret = CanTp_CancelTransmit(2);
        -:  289:
        1:  290:    TEST_CHECK(CanTp_VariablesTX.eCanTp_StateTX == CANTP_TX_WAIT);
        1:  291:    TEST_CHECK(CanTp_VariablesTX.CanTp_Current_TxId == 0); 
        1:  292:    TEST_CHECK(CanTp_VariablesTX.uiFrameNrFC == 0);
        1:  293:    TEST_CHECK(CanTp_VariablesTX.uiMsgLen == 0);
        1:  294:    TEST_CHECK(CanTp_VariablesTX.uiTransmittedBytes == 0);
        1:  295:    TEST_CHECK(ret == E_OK);
        -:  296:
        -:  297:  /*
        -:  298:                    TEST 2
        -:  299:              Zwracane E_NOT_OK (Błędne ID)
        -:  300:  */
        1:  301:    CanTp_VariablesTX.eCanTp_StateTX = CANTP_TX_WAIT;
        1:  302:    CanTp_VariablesTX.uiFrameNrFC = 3;
        1:  303:    CanTp_VariablesTX.CanTp_Current_TxId = 3;
        1:  304:    CanTp_VariablesTX.uiMsgLen = 87;
        1:  305:    CanTp_VariablesTX.uiTransmittedBytes = 45;
        1:  306:    CanTp_VariablesTX.uiNxtSN = 0;
        -:  307:
        1:  308:    ret = CanTp_CancelTransmit(1);
        -:  309:
        1:  310:    TEST_CHECK(CanTp_VariablesTX.eCanTp_StateTX == CANTP_TX_WAIT);
        1:  311:    TEST_CHECK(CanTp_VariablesTX.CanTp_Current_TxId == 3); 
        1:  312:    TEST_CHECK(CanTp_VariablesTX.uiFrameNrFC == 3);
        1:  313:    TEST_CHECK(CanTp_VariablesTX.uiMsgLen == 87);
        1:  314:    TEST_CHECK(CanTp_VariablesTX.uiTransmittedBytes == 45);
        1:  315:    TEST_CHECK(ret == E_NOT_OK);
        -:  316:
        1:  317:}
        -:  318:
        -:  319:/**
        -:  320:  @brief Test przerwania odbioru
        -:  321:
        -:  322:  Funkcja testująca przerwanie odbioru PDU.
        -:  323:*/
        1:  324:void Test_Of_CanTp_CancelReceive(void){
        -:  325:    Std_ReturnType ret;
        -:  326:  /*
        -:  327:                     TEST 1 
        -:  328:              Zwracane - E_OK (Zgodne ID)
        -:  329:  */
        1:  330:    CanTp_VariablesRX.eCanTp_StateRX == CANTP_RX_PROCESSING;
        1:  331:    CanTp_VariablesRX.uiBlocksNxtCts = 2;
        1:  332:    CanTp_VariablesRX.CanTp_Current_RxId = 2;
        1:  333:    CanTp_VariablesRX.uiExpected_CF_SN = 2;
        1:  334:    CanTp_VariablesRX.uiTransmittedBytes = 4;
        -:  335:
        1:  336:    ret = CanTp_CancelReceive(2);
        -:  337:
        1:  338:    TEST_CHECK(CanTp_VariablesRX.eCanTp_StateRX == CANTP_RX_WAIT);
        1:  339:    TEST_CHECK(CanTp_VariablesRX.uiBlocksNxtCts == 0);
        1:  340:    TEST_CHECK(CanTp_VariablesRX.CanTp_Current_RxId == 0);
        1:  341:    TEST_CHECK(CanTp_VariablesRX.uiExpected_CF_SN == 0);
        1:  342:    TEST_CHECK(CanTp_VariablesRX.uiTransmittedBytes == 0);
        1:  343:    TEST_CHECK(ret == E_OK);
        -:  344:
        -:  345:   /*
        -:  346:                    TEST 2
        -:  347:              Zwracane E_NOT_OK (Błędne ID)
        -:  348:  */
        1:  349:    CanTp_VariablesRX.eCanTp_StateRX = CANTP_RX_PROCESSING;
        1:  350:    CanTp_VariablesRX.uiBlocksNxtCts = 1;
        1:  351:    CanTp_VariablesRX.CanTp_Current_RxId = 3;
        1:  352:    CanTp_VariablesRX.uiExpected_CF_SN = 1;
        1:  353:    CanTp_VariablesRX.uiTransmittedBytes = 10;
        -:  354:
        1:  355:    ret = CanTp_CancelReceive(1);
        -:  356:
        1:  357:    TEST_CHECK(CanTp_VariablesRX.eCanTp_StateRX == CANTP_RX_PROCESSING);
        1:  358:    TEST_CHECK(CanTp_VariablesRX.uiBlocksNxtCts == 1);
        1:  359:    TEST_CHECK(CanTp_VariablesRX.CanTp_Current_RxId == 3);
        1:  360:    TEST_CHECK(CanTp_VariablesRX.uiExpected_CF_SN == 1);
        1:  361:    TEST_CHECK(CanTp_VariablesRX.uiTransmittedBytes == 10);
        1:  362:    TEST_CHECK(ret == E_NOT_OK);
        1:  363:}
        -:  364:
        -:  365:
        -:  366:/**
        -:  367:  @brief Test zmiany wartosci parametru
        -:  368:
        -:  369:  Funkcja testująca zmiane wartosci parametru.
        -:  370:*/
        -:  371:
        1:  372:void Test_Of_CanTp_ChangeParameter(void){
        1:  373:  PduIdType PduId = 1;
        -:  374:  TPParameterType Parameter;
        -:  375:  Std_ReturnType ret; 
        -:  376:
        -:  377:  /*
        -:  378:                    TEST 1
        -:  379:          Zmiana parametru TP_BS, TP_STMIN - zwracane E_OK
        -:  380:  */
        1:  381:  Parameter = TP_BS;
        1:  382:  CanTp_State = CANTP_ON;
        1:  383:  ret = CanTp_ChangeParameter(PduId, Parameter, 1);
        1:  384:  TEST_CHECK(ret == E_OK);
        1:  385:  Parameter = TP_STMIN;
        1:  386:  ret = CanTp_ChangeParameter(PduId, Parameter, 1);
        1:  387:  TEST_CHECK(ret == E_OK);
        -:  388:  /*
        -:  389:                    TEST 2
        -:  390:          Zmiana parametru TP_BC - zwracane E_NOT_OK
        -:  391:  */
        1:  392:  Parameter = TP_BC;
        1:  393:  ret = CanTp_ChangeParameter(PduId, Parameter, 1);
        1:  394:  TEST_CHECK(ret == E_NOT_OK);
        -:  395:  /*
        -:  396:                    TEST 3
        -:  397:          Zmiana parametru TP_BS - zwracane E_NOT_OK bo State CANTP_OFF
        -:  398:  */
        1:  399:  Parameter = TP_BS;
        1:  400:  CanTp_State = CANTP_OFF;
        1:  401:  ret = CanTp_ChangeParameter(PduId, Parameter, 1);
        1:  402:  TEST_CHECK(ret == E_NOT_OK);
        1:  403:}
        -:  404:
        -:  405:/**
        -:  406:  @brief Test odczytu wartosci parametru
        -:  407:
        -:  408:  Funkcja testująca odczyt wartosci parametru.
        -:  409:*/
        -:  410:
        1:  411:void Test_Of_CanTp_ReadParameter(void){
        1:  412:  PduIdType PduId = 1;
        -:  413:  TPParameterType Parameter;
        -:  414:  Std_ReturnType ret; 
        -:  415:  uint16 puiReadValue;
        -:  416:  /*
        -:  417:                    TEST 1
        -:  418:          Odczyt parametru TP_BS i TP_STmin - zwracane E_OK
        -:  419:  */
        1:  420:  Parameter = TP_BS;
        1:  421:  CanTp_State = CANTP_ON;
        1:  422:  ret = CanTp_ChangeParameter(PduId, Parameter, 1);
        1:  423:  ret = CanTp_ReadParameter(PduId, Parameter, &puiReadValue);
        1:  424:  TEST_CHECK(ret == E_OK);
        1:  425:  TEST_CHECK(puiReadValue == 1);
        1:  426:  Parameter = TP_STMIN;
        1:  427:  ret = CanTp_ChangeParameter(PduId, Parameter, 1);
        1:  428:  ret = CanTp_ReadParameter(PduId, Parameter, &puiReadValue);
        1:  429:  TEST_CHECK(ret == E_OK);
        1:  430:  TEST_CHECK(puiReadValue == 1);
        -:  431:  /*
        -:  432:                    TEST 2
        -:  433:          Zmiana parametru TP_BC - zwracane E_NOT_OK
        -:  434:  */
        1:  435:  puiReadValue = 2;
        1:  436:  Parameter = TP_BC;
        1:  437:  ret = CanTp_ReadParameter(PduId, Parameter, &puiReadValue);
        1:  438:  TEST_CHECK(ret == E_NOT_OK);
        1:  439:  TEST_CHECK(puiReadValue == 2);
        -:  440:  /*
        -:  441:                    TEST 3
        -:  442:          Zmiana parametru TP_BS - zwracane E_NOT_OK bo State CANTP_OFF
        -:  443:  */
        1:  444:  puiReadValue = 3;
        1:  445:  Parameter = TP_BS;
        1:  446:  CanTp_State = CANTP_OFF;
        1:  447:  ret = CanTp_ReadParameter(PduId, Parameter, &puiReadValue);
        1:  448:  TEST_CHECK(ret == E_NOT_OK);
        1:  449:  TEST_CHECK(puiReadValue == 3);
        1:  450:}
        -:  451:
        -:  452:/**
        -:  453:  @brief Test zarządzania modułem
        -:  454:
        -:  455:  Funkcja testująca zarządzanie modułem CanTp.
        -:  456:*/
        -:  457:
        1:  458:void Test_Of_CanTp_MainFunction(){
        1:  459:    RESET_FAKE(PduR_CanTpRxIndication);
        1:  460:    RESET_FAKE(CanIf_Transmit);
        -:  461:      
        1:  462:    Std_ReturnType retCanIf_Transmit[6] = {E_OK, E_OK, E_NOT_OK, E_NOT_OK, E_OK, E_NOT_OK};
        1:  463:    SET_RETURN_SEQ(CanIf_Transmit, retCanIf_Transmit, 6);
        1:  464:    PduLengthType BufferSizeArr[7] = {0,1,0,3,9,0,6};
        1:  465:    PduR_CanTpCopyRxData_buffSize_array = BufferSizeArr;
        -:  466:
        1:  467:    BufReq_ReturnType BufferRetValues[7] = {BUFREQ_OK, BUFREQ_OVFL, BUFREQ_OK, BUFREQ_OK, BUFREQ_OK, BUFREQ_E_NOT_OK, BUFREQ_OK};
        1:  468:    SET_RETURN_SEQ(PduR_CanTpCopyRxData, BufferRetValues, 7);
        1:  469:    PduR_CanTpCopyRxData_fake.custom_fake = PduR_CanTpCopyRxData_FF;
        -:  470:
        1:  471:    CanTp_TimerReset(&N_Ar_timer);
        1:  472:    CanTp_TimerReset(&N_Br_timer);
        1:  473:    CanTp_TimerReset(&N_Cr_timer);
        -:  474:    /*
        -:  475:                  TEST 1
        -:  476:      Test dla deaktywowanych timerów - brak zmian
        -:  477:    */
        1:  478:    CanTp_MainFunction();
        1:  479:    CanTp_MainFunction();
        1:  480:    CanTp_MainFunction();
        -:  481:
        1:  482:    TEST_CHECK(N_Ar_timer.eState == TIMER_DISABLE);
        1:  483:    TEST_CHECK(N_Br_timer.eState == TIMER_DISABLE);
        1:  484:    TEST_CHECK(N_Cr_timer.eState == TIMER_DISABLE);
        1:  485:    TEST_CHECK(N_Ar_timer.uiCounter == 0);
        1:  486:    TEST_CHECK(N_Br_timer.uiCounter == 0);
        1:  487:    TEST_CHECK(N_Cr_timer.uiCounter == 0);
        1:  488:    TEST_CHECK(PduR_CanTpCopyRxData_fake.call_count == 0); 
        1:  489:    TEST_CHECK(PduR_CanTpRxIndication_fake.call_count == 0);
        -:  490:
        -:  491:    /*
        -:  492:                TEST 2
        -:  493:    Standardowa praca układu dla Timerów RX
        -:  494:    */
        1:  495:    CanTp_VariablesRX.uiMsgLen = 10;
        1:  496:    CanTp_VariablesRX.uiTransmittedBytes = 0;
        -:  497:
        1:  498:    CanTp_TimerStart(&N_Ar_timer);
        1:  499:    CanTp_TimerStart(&N_Br_timer);
        1:  500:    CanTp_TimerStart(&N_Cr_timer);
        -:  501:    
        1:  502:    CanTp_MainFunction();
        1:  503:    CanTp_MainFunction();
        1:  504:    CanTp_MainFunction();
        -:  505:
        1:  506:    TEST_CHECK(N_Ar_timer.eState == TIMER_ENABLE);
        1:  507:    TEST_CHECK(N_Br_timer.eState == TIMER_ENABLE);
        1:  508:    TEST_CHECK(N_Cr_timer.eState == TIMER_ENABLE);
        1:  509:    TEST_CHECK(N_Ar_timer.uiCounter == 3);
        1:  510:    TEST_CHECK(N_Br_timer.uiCounter == 3);
        1:  511:    TEST_CHECK(N_Cr_timer.uiCounter == 3);
        1:  512:    TEST_CHECK(PduR_CanTpCopyRxData_fake.call_count == 3); 
        1:  513:    TEST_CHECK(PduR_CanTpRxIndication_fake.call_count == 0);
        -:  514:
        1:  515:    CanTp_MainFunction();
        -:  516:
        1:  517:    TEST_CHECK(N_Ar_timer.eState == TIMER_ENABLE);
        1:  518:    TEST_CHECK(N_Br_timer.eState == TIMER_ENABLE);
        1:  519:    TEST_CHECK(N_Cr_timer.eState == TIMER_ENABLE);
        1:  520:    TEST_CHECK(N_Ar_timer.uiCounter == 4);
        1:  521:    TEST_CHECK(N_Br_timer.uiCounter == 4);
        1:  522:    TEST_CHECK(N_Cr_timer.uiCounter == 4);
        1:  523:    TEST_CHECK(PduR_CanTpCopyRxData_fake.call_count == 4); 
        1:  524:    TEST_CHECK(PduR_CanTpRxIndication_fake.call_count == 0);
        -:  525:
        -:  526:    /*
        -:  527:                TEST 3
        -:  528:    Standardowa praca układu dla Timerów TX
        -:  529:    */
        1:  530:    CanTp_ResetRX();
        1:  531:    CanTp_ResetTX();
        -:  532:
        1:  533:    CanTp_TimerStart(&N_Bs_timer);
        1:  534:    CanTp_TimerStart(&N_Cs_timer);
        1:  535:    CanTp_TimerStart(&N_As_timer);
        -:  536:
        1:  537:    CanTp_MainFunction();
        1:  538:    CanTp_MainFunction();
        1:  539:    CanTp_MainFunction();
        1:  540:    CanTp_MainFunction();
        -:  541:
        1:  542:    TEST_CHECK(N_As_timer.uiCounter == 4);
        1:  543:    TEST_CHECK(N_As_timer.eState == TIMER_ENABLE);
        1:  544:    TEST_CHECK(N_Bs_timer.uiCounter == 4);
        1:  545:    TEST_CHECK(N_Bs_timer.eState == TIMER_ENABLE);
        1:  546:    TEST_CHECK(N_Cs_timer.uiCounter == 4);
        1:  547:    TEST_CHECK(N_Cs_timer.eState == TIMER_ENABLE);
        -:  548:
        -:  549:    /*
        -:  550:                TEST 4
        -:  551:    Timeout dla Timera As TX
        -:  552:    */
        -:  553:
        1:  554:    CanTp_ResetRX();
        1:  555:    CanTp_ResetTX();
        -:  556:
        1:  557:    N_As_timer.uiCounter = 90;
        1:  558:    CanTp_TimerStart(&N_As_timer);
        1:  559:    CanTp_MainFunction();
        -:  560:
        1:  561:    TEST_CHECK(N_As_timer.uiCounter == 91);
        1:  562:    TEST_CHECK(N_As_timer.eState == TIMER_ENABLE);
        1:  563:    TEST_CHECK(N_Bs_timer.uiCounter == 0);
        1:  564:    TEST_CHECK(N_Bs_timer.eState == TIMER_DISABLE);
        1:  565:    TEST_CHECK(N_Cs_timer.uiCounter == 0);
        1:  566:    TEST_CHECK(N_Cs_timer.eState == TIMER_DISABLE);
        -:  567:
        1:  568:    TEST_CHECK(PduR_CanTpTxConfirmation_fake.call_count == 0);
        -:  569:    
        1:  570:    N_As_timer.uiCounter = 99;
        1:  571:    CanTp_MainFunction();
        -:  572:
        1:  573:    TEST_CHECK(N_As_timer.uiCounter == 0);
        1:  574:    TEST_CHECK(N_As_timer.eState == TIMER_DISABLE);
        1:  575:    TEST_CHECK(N_Bs_timer.uiCounter == 0);
        1:  576:    TEST_CHECK(N_Bs_timer.eState == TIMER_DISABLE);
        1:  577:    TEST_CHECK(N_Cs_timer.uiCounter == 0);
        1:  578:    TEST_CHECK(N_Cs_timer.eState == TIMER_DISABLE);
        -:  579:
        1:  580:    TEST_CHECK(PduR_CanTpTxConfirmation_fake.call_count == 1);
        1:  581:}
        -:  582:
        -:  583:
        -:  584:/**
        -:  585:  @brief Test Potwierdzenia transmisji
        -:  586:
        -:  587:  Funkcja testującapotwierdzenie transmisji PDU.
        -:  588:*/
        1:  589:void Test_Of_CanTp_TxConfirmation(void){
        -:  590:  PduInfoType PduInfo;
        -:  591:  uint8 puiSduData[8];
        -:  592:  uint8 *puiMetaData;
        1:  593:  PduInfo.MetaDataPtr = puiMetaData;
        1:  594:  PduInfo.SduDataPtr = puiSduData;
        -:  595:  Std_ReturnType ret; 
        -:  596:
        1:  597:  PduLengthType pAvailableDataArr[10] = {1,2,3,4,5,6,7,8,9,0};
        1:  598:  uint8 puiSduDataArr[4][4] = {"dupa", "dupa", "test", "dwa."};
        -:  599:
        -:  600:  PduLengthType availableData;
        -:  601:  int i;
        5:  602:  for( i = 0; i < 4; i++){
        4:  603:      memcpy(PduR_CanTpCopyTxData_sdu_data[i], puiSduDataArr[i], sizeof(uint8)*7);
        -:  604:  }
        1:  605:  PduR_CanTpCopyTxData_availableDataPtr = pAvailableDataArr;
        -:  606:
        1:  607:  RESET_FAKE(PduR_CanTpCopyTxData);
        1:  608:  RESET_FAKE(CanIf_Transmit);
        1:  609:  RESET_FAKE(PduR_CanTpTxConfirmation);
        -:  610:
        1:  611:  PduR_CanTpCopyTxData_fake.custom_fake = PduR_CanTpCopyTxData_FF;
        -:  612:
        1:  613:  Std_ReturnType retCanIf_Transmit[7] = {E_OK, E_OK, E_NOT_OK, E_OK, E_NOT_OK, E_NOT_OK, E_NOT_OK};
        1:  614:  SET_RETURN_SEQ(CanIf_Transmit, retCanIf_Transmit, 7);
        -:  615:
        1:  616:  BufReq_ReturnType retPduR_CanTpCopyTxData[9] = {BUFREQ_OK, BUFREQ_OK, BUFREQ_OK, BUFREQ_E_NOT_OK , BUFREQ_BUSY, BUFREQ_BUSY, BUFREQ_E_NOT_OK, BUFREQ_BUSY, BUFREQ_OK};
        1:  617:  SET_RETURN_SEQ(PduR_CanTpCopyTxData, retPduR_CanTpCopyTxData, 9);
        -:  618:
        1:  619:  CanTp_State = CANTP_ON;
        -:  620:/*
        -:  621:          TEST 1
        -:  622:  Transmisja poprawna
        -:  623:*/
        1:  624:  CanTp_VariablesTX.eCanTp_StateTX = CANTP_TX_PROCESSING;
        1:  625:  CanTp_VariablesTX.uiFrameNrFC = 1;
        1:  626:  CanTp_VariablesTX.CanTp_Current_TxId = 1;
        1:  627:  CanTp_VariablesTX.uiMsgLen = 80;
        1:  628:  CanTp_VariablesTX.uiTransmittedBytes = 75;
        1:  629:  CanTp_VariablesTX.uiNxtSN = 0;
        -:  630:
        1:  631:  CanTp_TxConfirmation(1, E_OK);
        -:  632: 
        1:  633:  TEST_CHECK(PduR_CanTpCopyTxData_fake.call_count == 1);
        1:  634:  TEST_CHECK(PduR_CanTpCopyTxData_fake.arg0_val == 1);
        1:  635:  TEST_CHECK(PduR_CanTpCopyTxData_fake.arg1_val->SduLength == 5);
        1:  636:  TEST_CHECK(PduR_CanTpCopyTxData_fake.arg2_val == NULL);
        -:  637:
        1:  638:  TEST_CHECK(CanIf_Transmit_fake.call_count == 1 );
        -:  639:
        1:  640:  TEST_CHECK(CanIf_Transmit_fake.arg0_val == 1 ); 
        1:  641:  TEST_CHECK(CanIf_Transmit_fake.arg1_val->SduDataPtr[0] == 0x20 );
        1:  642:  TEST_CHECK(CanIf_Transmit_fake.arg1_val->SduDataPtr[1] == 'd' );
        1:  643:  TEST_CHECK(CanIf_Transmit_fake.arg1_val->SduDataPtr[2] == 'u' );
        1:  644:  TEST_CHECK(CanIf_Transmit_fake.arg1_val->SduDataPtr[3] == 'p' );
        1:  645:  TEST_CHECK(CanIf_Transmit_fake.arg1_val->SduDataPtr[4] == 'a' );
        -:  646:
        1:  647:  TEST_CHECK(CanTp_VariablesTX.eCanTp_StateTX == CANTP_TX_PROCESSING);
        1:  648:  TEST_CHECK(CanTp_VariablesTX.CanTp_Current_TxId == 1); 
        1:  649:  TEST_CHECK(CanTp_VariablesTX.uiFrameNrFC == 0);
        1:  650:  TEST_CHECK(CanTp_VariablesTX.uiMsgLen == 80);
        1:  651:  TEST_CHECK(CanTp_VariablesTX.uiTransmittedBytes == 80);
        -:  652:
        1:  653:  CanTp_ResetRX();
        1:  654:  CanTp_ResetTX();
        -:  655:
        -:  656:  /*
        -:  657:            TEST 2
        -:  658:    RETURN E_NOT_OK
        -:  659:  */
        -:  660:
        1:  661:  CanTp_VariablesTX.eCanTp_StateTX = CANTP_TX_PROCESSING;
        1:  662:  CanTp_VariablesTX.uiFrameNrFC = 3;
        1:  663:  CanTp_VariablesTX.CanTp_Current_TxId = 1;
        1:  664:  CanTp_VariablesTX.uiMsgLen = 80;
        1:  665:  CanTp_VariablesTX.uiTransmittedBytes = 75;
        1:  666:  CanTp_VariablesTX.uiNxtSN = 2;
        -:  667:
        1:  668:  CanTp_TxConfirmation (1, E_NOT_OK );
        -:  669: 
        1:  670:  TEST_CHECK(PduR_CanTpCopyTxData_fake.call_count == 1);
        -:  671:  
        1:  672:  TEST_CHECK( PduR_CanTpTxConfirmation_fake.call_count == 1 );
        1:  673:  TEST_CHECK( PduR_CanTpTxConfirmation_fake.arg0_val == 1 );
        1:  674:  TEST_CHECK( PduR_CanTpTxConfirmation_fake.arg1_val == E_NOT_OK );
        -:  675:
        1:  676:  TEST_CHECK(CanTp_VariablesTX.eCanTp_StateTX == CANTP_TX_WAIT);
        1:  677:  TEST_CHECK(CanTp_VariablesTX.CanTp_Current_TxId == 0);
        1:  678:  TEST_CHECK(CanIf_Transmit_fake.call_count == 1 );
        1:  679:  TEST_CHECK(CanTp_VariablesTX.uiFrameNrFC == 0);
        1:  680:  TEST_CHECK(CanTp_VariablesTX.uiMsgLen == 0);
        1:  681:  TEST_CHECK(CanTp_VariablesTX.uiTransmittedBytes == 0);
        -:  682:
        1:  683:  CanTp_ResetRX();
        1:  684:  CanTp_ResetTX();
        -:  685:
        -:  686:  /*
        -:  687:      TEST 3 
        -:  688:    UNKNOWN ID
        -:  689:  */
        -:  690:
        1:  691:  CanTp_VariablesTX.eCanTp_StateTX = CANTP_TX_PROCESSING;
        1:  692:  CanTp_VariablesTX.uiFrameNrFC = 2;
        1:  693:  CanTp_VariablesTX.CanTp_Current_TxId = 3;
        1:  694:  CanTp_VariablesTX.uiMsgLen = 80;
        1:  695:  CanTp_VariablesTX.uiTransmittedBytes = 75;
        1:  696:  CanTp_VariablesTX.uiNxtSN = 0;
        -:  697:
        1:  698:  CanTp_TxConfirmation(2, E_NOT_OK);
        -:  699:
        1:  700:  TEST_CHECK(PduR_CanTpCopyTxData_fake.call_count == 1);
        1:  701:  TEST_CHECK( PduR_CanTpTxConfirmation_fake.call_count == 1 );
        -:  702:
        1:  703:  TEST_CHECK(CanIf_Transmit_fake.call_count == 1 );
        -:  704:
        1:  705:  TEST_CHECK(CanTp_VariablesTX.eCanTp_StateTX == CANTP_TX_PROCESSING);
        1:  706:  TEST_CHECK(CanTp_VariablesTX.CanTp_Current_TxId == 3);
        1:  707:  TEST_CHECK(CanTp_VariablesTX.uiFrameNrFC == 2);
        1:  708:  TEST_CHECK(CanTp_VariablesTX.uiMsgLen == 80);
        1:  709:  TEST_CHECK(CanTp_VariablesTX.uiTransmittedBytes == 75);
        -:  710:
        1:  711:  CanTp_ResetRX();
        1:  712:  CanTp_ResetTX();
        1:  713:}
        -:  714:
        -:  715:/** ==================================================================================================================*\
        -:  716:                                TESTY FUNKCJI POMOCNICZYCH
        -:  717:\*====================================================================================================================*/
        -:  718:
        1:  719:void Test_Of_CanTp_ResetRX(){     
        1:  720:  CanTp_VariablesRX.eCanTp_StateRX == CANTP_RX_PROCESSING;
        1:  721:  CanTp_VariablesRX.uiExpected_CF_SN == 1;
        1:  722:  CanTp_VariablesRX.uiMsgLen == 5;
        1:  723:  CanTp_VariablesRX.uiTransmittedBytes == 4;
        1:  724:  CanTp_VariablesRX.uiBlocksNxtCts == 2;
        1:  725:  CanTp_VariablesRX.CanTp_Current_RxId == 2;
        1:  726:  CanTp_ResetRX();
        1:  727:  TEST_CHECK(CanTp_VariablesRX.eCanTp_StateRX == CANTP_RX_WAIT);
        1:  728:  TEST_CHECK(CanTp_VariablesRX.uiExpected_CF_SN == 0);
        1:  729:  TEST_CHECK(CanTp_VariablesRX.uiMsgLen == 0);
        1:  730:  TEST_CHECK(CanTp_VariablesRX.uiTransmittedBytes == 0);
        1:  731:  TEST_CHECK(CanTp_VariablesRX.uiBlocksNxtCts == 0);
        1:  732:  TEST_CHECK(CanTp_VariablesRX.CanTp_Current_RxId == 0);
        1:  733:}
        -:  734:
        1:  735:void Test_Of_CanTp_ResetTX(void){
        1:  736:  CanTp_VariablesTX.eCanTp_StateTX = CANTP_TX_PROCESSING;
        1:  737:  CanTp_VariablesTX.uiFrameNrFC = 2;
        1:  738:  CanTp_VariablesTX.CanTp_Current_TxId = 3;
        1:  739:  CanTp_VariablesTX.uiMsgLen = 4;
        1:  740:  CanTp_VariablesTX.uiTransmittedBytes = 5;
        1:  741:  CanTp_ResetTX();
        1:  742:  TEST_CHECK(CanTp_VariablesTX.eCanTp_StateTX == CANTP_TX_WAIT);
        1:  743:  TEST_CHECK(CanTp_VariablesTX.uiFrameNrFC == 0);
        1:  744:  TEST_CHECK(CanTp_VariablesTX.CanTp_Current_TxId == 0);
        1:  745:  TEST_CHECK(CanTp_VariablesTX.uiMsgLen == 0);
        1:  746:  TEST_CHECK(CanTp_VariablesTX.uiTransmittedBytes == 0);
        1:  747:}
        -:  748:
        1:  749:void Test_Of_CanTp_CalcBlocksSize(void){
        1:  750:  CanTp_VariablesRX.uiMsgLen = 8;
        1:  751:  CanTp_VariablesRX.uiTransmittedBytes = 0;
        1:  752:  TEST_CHECK(CanTp_CalcBlocksSize(10) == 2);
        1:  753:  TEST_CHECK(CanTp_CalcBlocksSize(6) == 0);
        1:  754:}
        -:  755:
        1:  756:void Test_Of_CanTp_FrameCheckType(void){
        -:  757:    uint8 puiSduData[7];
        -:  758:    CanPCI_Type CanFrameInfo;
        -:  759:    PduInfoType CanData;
        1:  760:    CanData.SduDataPtr = puiSduData;
        1:  761:    CanData.SduLength = 7;
        -:  762:
        -:  763:    // SF - Single Frame Type check
        1:  764:    CanData.SduDataPtr[0] = 0x0F; 
        1:  765:    CanData.SduDataPtr[1] = 0;
        1:  766:    CanData.SduDataPtr[2] = 0;
        -:  767:
        1:  768:    TEST_CHECK(CanTp_GetPCI(&CanData, &CanFrameInfo) == E_OK);
        1:  769:    TEST_CHECK(CanFrameInfo.eFrameType == CAN_SF);
        1:  770:    TEST_CHECK(CanFrameInfo.uiFrameLenght == 0xF);
        1:  771:    TEST_CHECK(CanFrameInfo.uiBlockSize == 0);
        1:  772:    TEST_CHECK(CanFrameInfo.uiFlowStatus == 0);
        1:  773:    TEST_CHECK(CanFrameInfo.uiSeparationTime == 0);
        1:  774:    TEST_CHECK(CanFrameInfo.uiSeparationTime == 0);
        1:  775:}
        -:  776:
        -:  777:
        -:  778:TEST_LIST = {
        -:  779:    { "Test of CanTp_MainFunction", Test_Of_CanTp_MainFunction },
        -:  780:    { "Test of CanTp_ReadParameter", Test_Of_CanTp_ReadParameter },
        -:  781:    { "Test of CanTp_ChangeParameter", Test_Of_CanTp_ChangeParameter },
        -:  782:    { "Test of CanTp_FrameCheckType", Test_Of_CanTp_FrameCheckType },
        -:  783:    { "Test of CanTp_CalcBlocksSize", Test_Of_CanTp_CalcBlocksSize },
        -:  784:    { "Test of CanTp_ResetTX", Test_Of_CanTp_ResetTX },
        -:  785:    { "Test of CanTp_ResetRX", Test_Of_CanTp_ResetRX },
        -:  786:    { "Test of CanTp_TxConfirmation", Test_Of_CanTp_TxConfirmation },
        -:  787:    { "Test of CanTp_CancelReceive", Test_Of_CanTp_CancelReceive },
        -:  788:    { "Test of CanTp_CancelTransmit", Test_Of_CanTp_CancelTransmit },
        -:  789:    { "Test of CanTp_Transmit", TestOf_CanTp_Transmit },
        -:  790:    { "Test of CanTp_Init", Test_Of_CanTp_Init },
        -:  791:    { "Test of CanTp_Shutdown", Test_Of_CanTp_Shutdown },
        -:  792:	  { "Test of CanTp_GetVersionInfo", Test_Of_CanTp_GetVersionInfo },
        -:  793:    { NULL, NULL }                           
        -:  794:};
